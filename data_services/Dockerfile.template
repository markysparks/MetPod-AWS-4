FROM balenalib/%%BALENA_MACHINE_NAME%%-debian-python:3.9-run

# Set our working directory
WORKDIR /usr/src/app

# Copy requirements.txt first for better cache on later pushes
COPY requirements.txt requirements.txt

# pip install python deps from requirements.txt on the resin.io build server
RUN pip3 install -r requirements.txt

# This will copy all files in our root to the working  directory in the container
COPY . ./

# Environmental variables are stated here for use when developing in 'local'
# mode and will also be used if they are not set in the Balena Dashboard,
# or Balena dashboard is not used. Each variable can be set in a balena.yml
# file under.balena=>secrets=>balena.yml as a global variable or on a
# 'per service' basis. The .balena folder should excluded from any code hosting
# platform e.g. GitHub to avoid secret information being revealed in the codebase.
ARG USE_CALC_WINDS
ARG USE_CALC_MAXMIN_TEMPS

ARG WOW_ENABLE
ARG WOW_TX_INTERVAL
ARG WOW_URL
ARG SOFTWARETYPE
ARG WOW_SITE_ID
ARG WOW_AUTH_KEY
ARG SITE_ALTITUDE
ARG BARO_HT

ARG EXT_MQTT_ENABLE
ARG EXT_MQTT_HOST
ARG EXT_MQTT_PORT
ARG EXT_MQTT_CLIENT_ID
ARG EXT_MQTT_USER
ARG EXT_MQTT_PASSWORD
ARG EXT_MQTT_QOS

ARG WINDY_ENABLE
ARG WINDY_URL
ARG WINDY_TX_INTERVAL
ARG WINDY_AUTH_KEY

ARG WX_UNDERGROUND_URL
ARG WX_UNDERGROUND_ID
ARG WX_UNDERGROUND_TX_INTERVAL
ARG WX_UNDERGROUND_ENABLE
ARG WX_UNDERGROUND_PASSWORD

ARG CORLYSIS_ENABLE
ARG CORLYSIS_TX_INTERVAL
ARG CORLYSIS_DB
ARG CORLYSIS_URL
ARG CORLYSIS_AUTH
ARG CORLYSIS_TOKEN

ARG AWS_ENDPOINT
ARG AWS_PRIVATE_CERT
ARG AWS_ROOT_CERT
ARG AWS_THING_CERT
ARG AWS_IOT_ENABLE
ARG AWS_TX_INTERVAL

ENV USE_CALC_WINDS=${USE_CALC_WINDS}
ENV USE_CALC_MAXMIN_TEMPS=${USE_CALC_MAXMIN_TEMPS}

ENV EXT_MQTT_ENABLE=${EXT_MQTT_ENABLE}
ENV EXT_MQTT_HOST=${EXT_MQTT_HOST}
ENV EXT_MQTT_PORT=${EXT_MQTT_PORT}
ENV EXT_MQTT_CLIENT_ID=${EXT_MQTT_CLIENT_ID}
ENV EXT_MQTT_USER=${EXT_MQTT_USER}
ENV EXT_MQTT_PASSWORD=${EXT_MQTT_PASSWORD}
ENV EXT_MQTT_QOS=${EXT_MQTT_QOS}

ENV AWS_ENDPOINT=${AWS_ENDPOINT}
ENV AWS_PRIVATE_CERT=${AWS_PRIVATE_CERT}
ENV AWS_ROOT_CERT=${AWS_ROOT_CERT}
ENV AWS_THING_CERT=${AWS_THING_CERT}
ENV AWS_IOT_ENABLE=${AWS_IOT_ENABLE}
ENV AWS_TX_INTERVAL=${AWS_TX_INTERVAL}

ENV WOW_ENABLE=${WOW_ENABLE}
ENV WOW_URL=${WOW_URL}
ENV SOFTWARETYPE=${SOFTWARETYPE}
ENV WOW_SITE_ID=${WOW_SITE_ID}
ENV WOW_AUTH_KEY=${WOW_AUTH_KEY}
ENV WOW_TX_INTERVAL=${WOW_TX_INTERVAL}
ENV SITE_ALTITUDE=${SITE_ALTITUDE}
ENV BARO_HT=${BARO_HT}

ENV WINDY_ENABLE=${WINDY_ENABLE}
ENV WINDY_URL=${WINDY_URL}
ENV WINDY_TX_INTERVAL=${WINDY_TX_INTERVAL}
ENV WINDY_AUTH_KEY=${WINDY_AUTH_KEY}

ENV WX_UNDERGROUND_URL=${WX_UNDERGROUND_URL}
ENV WX_UNDERGROUND_ID=${WX_UNDERGROUND_ID}
ENV WX_UNDERGROUND_TX_INTERVAL=${WX_UNDERGROUND_TX_INTERVAL}
ENV WX_UNDERGROUND_ENABLE=${WX_UNDERGROUND_ENABLE}
ENV WX_UNDERGROUND_PASSWORD=${WX_UNDERGROUND_PASSWORD}

ENV CORLYSIS_ENABLE=${CORLYSIS_ENABLE}
ENV CORLYSIS_TX_INTERVAL=${CORLYSIS_TX_INTERVAL}
ENV COLYSIS_DB=${COLYSIS_DB}
ENV CORLYSIS_URL=${CORLYSIS_URL}
ENV CORLYSIS_AUTH=${CORLYSIS_AUTH}
ENV CORLYSIS_TOKEN=${CORLYSIS_TOKEN}

# script to run when container starts up on the device
CMD ["python3","-u","startup_data_services.py"]
